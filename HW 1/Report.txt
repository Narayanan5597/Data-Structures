
Report
-------

1. Q: What's the best-case, worst-case, and average-case time complexities of quicksort.

Ans Best Case Time Complexity 

The best case for quick sort occurs when the partioned pivot element is the middle element or the partioned pivot position
can be one element greater than or lesser than the pivot element 

for the first iteration the time complexity is O(n) 
for every further iteration , it has n(logn)

So we have n element * log2n partioning level. Therefore 
the best case is O(nlog n) 


Worst Case Time Complexity 

If the pivot is either the smallest or largest element of the list , then it is Worst case Time Complexity 
That is if the elements in the list is already sorted 

For each and every iteration 1 element will be removed starting from the 0th position or the last position diagonally 


1) n
2) n-1
3) n-2
   etc....

partioning decreases linealry from 1/2 to 0 
So the worst case complexity is O(n^2) 

Average Time Complexity 

the averaege time complrxity looks similar to the best case time complexity of the quick sort algorithm. 
the best case is O(nlog n) 

2.  Q: What's the best-case, worst-case, and average-case time complexities? Briefly explain.


Quick Select

Best Case Time Complexity

The best case occurs whent the lis is partioned into two equal halves and proceed further with only  one half 
 T(n) = cn + T(n/2) 
      = cn + c(n/2) + T(n/4)
      = O(n) 

Worst Case Time Complexity 
Worst Case occurs when we pick the largest or the smallest element as the pivot element 
 
 T(n) = cn + T(n-1) 
      = cn + T(n-1)  + T(n-2) + c(n-1)
      = O(n^2) 

Average Case 
The Time complexity for the average case is O(n) to find the kth smaller or largest element in the array  


3. Buggy Qsort Revisited

the time complexities for the Buggy sort operation is as follows 

qsort 
the time complexity for the qsort operation is  O(nlog n) when the pivot element is the middle element 

insert
the time complexity for the insert operation is O(logN ) for the binary search tree

search 
If the key is unique, the number of nodes visited is equal to h, and the search can be done in time O(h).


Debriefing
----------
1. Approximately how many hours did you spend on this assignment?               -8 hrs
2. Would you rate it as easy, moderate, or difficult?                           -Moderate
3. Did you work on it mostly alone, or mostly with other people?                -Alone
4. How deeply do you feel you understand the material it covers (0%-100%)? 9    -0%
5. Any other comments?                                                          -No